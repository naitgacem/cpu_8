// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2023 09:29:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vhdl9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vhdl9_vlg_sample_tst(
	a,
	b,
	sel,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [2:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vhdl9_vlg_check_tst (
	c,
	hex0,
	n,
	y,
	z,
	sampler_rx
);
input  c;
input [6:0] hex0;
input  n;
input [3:0] y;
input  z;
input sampler_rx;

reg  c_expected;
reg [6:0] hex0_expected;
reg  n_expected;
reg [3:0] y_expected;
reg  z_expected;

reg  c_prev;
reg [6:0] hex0_prev;
reg  n_prev;
reg [3:0] y_prev;
reg  z_prev;

reg  c_expected_prev;
reg  n_expected_prev;
reg [3:0] y_expected_prev;
reg  z_expected_prev;

reg  last_c_exp;
reg  last_n_exp;
reg [3:0] last_y_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_prev = c;
	hex0_prev = hex0;
	n_prev = n;
	y_prev = y;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	c_expected_prev = c_expected;
	n_expected_prev = n_expected;
	y_expected_prev = y_expected;
	z_expected_prev = z_expected;
end


// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
	y_expected[3] = #170000 1'b0;
	y_expected[3] = #40000 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
	y_expected[2] = #170000 1'b0;
	y_expected[2] = #40000 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
	y_expected[1] = #170000 1'b0;
	y_expected[1] = #40000 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
	y_expected[0] = #170000 1'b0;
	y_expected[0] = #40000 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected n
initial
begin
	n_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(c_expected or c or hex0_expected or hex0 or n_expected or n or y_expected or y or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c = %b | expected hex0 = %b | expected n = %b | expected y = %b | expected z = %b | ",c_expected_prev,hex0_expected_prev,n_expected_prev,y_expected_prev,z_expected_prev);
	$display("| real c = %b | real hex0 = %b | real n = %b | real y = %b | real z = %b | ",c_prev,hex0_prev,n_prev,y_prev,z_prev);
`endif
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( n_expected_prev !== 1'bx ) && ( n_prev !== n_expected_prev )
		&& ((n_expected_prev !== last_n_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_expected_prev);
		$display ("     Real value = %b", n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n_exp = n_expected_prev;
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vhdl9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] sel;
// wires                                               
wire c;
wire [6:0] hex0;
wire n;
wire [3:0] y;
wire z;

wire sampler;                             

// assign statements (if any)                          
vhdl9 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.hex0(hex0),
	.n(n),
	.sel(sel),
	.y(y),
	.z(z)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #80000 1'b0;
	a[3] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		a[3] = 1'b0;
		a[3] = #80000 1'b1;
		# 80000;
	end
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #10000 1'b0;
	a[2] = #30000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #50000 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #50000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #40000 1'b1;
	# 40000;
	repeat(8)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
	a[1] = #40000 1'b0;
	a[1] = #20000 1'b1;
	a[1] = #10000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #20000 1'b0;
	a[1] = #20000 1'b1;
	a[1] = #20000 1'b0;
	a[1] = #60000 1'b1;
	# 20000;
	repeat(19)
	begin
		a[1] = 1'b0;
		a[1] = #20000 1'b1;
		# 20000;
	end
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #10000 1'b0;
	a[0] = #10000 1'b1;
	# 10000;
	repeat(2)
	begin
		a[0] = 1'b0;
		a[0] = #10000 1'b1;
		# 10000;
	end
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	a[0] = #20000 1'b0;
	a[0] = #40000 1'b1;
	# 10000;
	repeat(39)
	begin
		a[0] = 1'b0;
		a[0] = #10000 1'b1;
		# 10000;
	end
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #30000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #50000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #80000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #30000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #30000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #30000 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #30000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #30000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #30000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #30000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #10000 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #10000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #50000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #30000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #30000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #30000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #50000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #30000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #30000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #60000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #10000 1'b1;
	b[2] = #10000 1'b0;
	b[2] = #20000 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #50000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #50000 1'b1;
	b[1] = #30000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #30000 1'b0;
	b[1] = #30000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #50000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #30000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #60000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #30000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #10000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #50000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #30000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #60000 1'b0;
	b[0] = #30000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #10000 1'b0;
	b[0] = #30000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #10000 1'b1;
	b[0] = #20000 1'b0;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b0;
	sel[2] = #90000 1'b1;
	sel[2] = #80000 1'b0;
	sel[2] = #50000 1'b1;
	sel[2] = #40000 1'b0;
	sel[2] = #40000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #30000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #50000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #40000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #60000 1'b1;
	sel[2] = #30000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #30000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #20000 1'b0;
	sel[2] = #30000 1'b1;
	sel[2] = #30000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #30000 1'b0;
	sel[2] = #20000 1'b1;
	sel[2] = #10000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #20000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #50000 1'b0;
	sel[2] = #30000 1'b1;
	sel[2] = #40000 1'b0;
	sel[2] = #10000 1'b1;
	sel[2] = #10000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #40000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #40000 1'b1;
	sel[1] = #40000 1'b0;
	sel[1] = #40000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #30000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #20000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #20000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #30000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #30000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #60000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #20000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #20000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #40000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #10000 1'b0;
	sel[1] = #10000 1'b1;
	sel[1] = #10000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #30000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #50000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #60000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #40000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #50000 1'b0;
	sel[0] = #30000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #30000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #30000 1'b0;
	sel[0] = #40000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
	sel[0] = #20000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #40000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #10000 1'b0;
	sel[0] = #10000 1'b1;
end 

vhdl9_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sel(sel),
	.sampler_tx(sampler)
);

vhdl9_vlg_check_tst tb_out(
	.c(c),
	.hex0(hex0),
	.n(n),
	.y(y),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

